package editor;import javax.swing.*;import javax.swing.event.UndoableEditEvent;import javax.swing.event.UndoableEditListener;import javax.swing.text.DefaultStyledDocument;import javax.swing.undo.UndoManager;import java.awt.*;import java.awt.event.ActionEvent;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStream;//文本编辑器public class Editor extends JFrame {    private UndoManager um = new UndoManager();//撤销管理类    JTextPane textPane = new JTextPane(); //文本窗格，编辑窗口    JLabel statusBar = new JLabel(); //状态栏    JFileChooser filechooser = new JFileChooser(); //文件选择器    public Editor() {        //调用父类构造函数        super("文本编辑器");        Action[] actions =  //Action数组,各种操作命令                {                        new NewAction(),                        new OpenAction(),                        new SaveAction(),                        new PopupUndoAction(),                        new PopupRedoAction(),                        new CutAction(),                        new CopyAction(),                        new PasteAction(),                        new AboutAction(),                        new ExitAction(),                        new FanyiAction(),                };        setJMenuBar(createJMenuBar(actions));  //设置菜单栏        Container container = getContentPane(); //得到容器        container.add(createJToolBar(actions), BorderLayout.NORTH); //增加工具栏        container.add(textPane, BorderLayout.CENTER); //增加文本窗格        container.add(statusBar, BorderLayout.SOUTH); //增加状态栏        textPane.getDocument().addUndoableEditListener(new UndoableEditListener() {//注册撤销可编辑监听器            @Override            public void undoableEditHappened(UndoableEditEvent e) {                um.addEdit(e.getEdit());            }        });//编辑撤销的监听        setSize(650, 400); //设置窗口尺寸        setVisible(true);  //设置窗口可视        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  //关闭窗口时退出程序    }    //创建菜单栏    private JMenuBar createJMenuBar(Action[] actions) {        JMenuBar menubar = new JMenuBar(); //实例化菜单栏        JMenu menuFile = new JMenu("文件"); //实例化菜单        JMenu menuEdit = new JMenu("编辑");        JMenu menuAbout = new JMenu("帮助");        menuFile.add(new JMenuItem(actions[0])); //增加新菜单项        menuFile.add(new JMenuItem(actions[1]));        menuFile.add(new JMenuItem(actions[2]));        menuFile.add(new JMenuItem(actions[7]));        menuEdit.add(new JMenuItem(actions[3]));        menuEdit.add(new JMenuItem(actions[4]));        menuEdit.add(new JMenuItem(actions[5]));        menuAbout.add(new JMenuItem(actions[6]));        menubar.add(menuFile); //增加菜单        menubar.add(menuEdit);        menubar.add(menuAbout);        return menubar; //返回菜单栏    }    //创建工具条    private JToolBar createJToolBar(Action[] actions) {        //实例化工具条        JToolBar toolBar = new JToolBar();        for (int i = 0; i < actions.length; i++) {            JButton bt = new JButton(actions[i]); //实例化新的按钮            bt.setRequestFocusEnabled(false); //设置不需要焦点            toolBar.add(bt); //增加按钮到工具栏        }        return toolBar;  //返回工具栏    }    //新建文件命令    class NewAction extends AbstractAction {        private static final long serialVersionUID = 5250434438328838726L;        public NewAction() {            super("新建");        }        @Override        public void actionPerformed(ActionEvent e) {            textPane.setDocument(new DefaultStyledDocument()); //清空文档        }    }    //打开文件命令    class OpenAction extends AbstractAction {        private static final long serialVersionUID = -8403731244421694124L;        public OpenAction() {            super("打开");        }        @Override        public void actionPerformed(ActionEvent e) {            int i = filechooser.showOpenDialog(Editor.this); //显示打开文件对话框            if (i == JFileChooser.APPROVE_OPTION) { //点击对话框中打开选项                File f = filechooser.getSelectedFile(); //得到选择的文件                try {                    InputStream is = new FileInputStream(f); //得到文件输入流                    textPane.read(is, "d"); //读入文件到文本窗格                    is.close();                } catch (Exception ex) {                    ex.printStackTrace();  //输出出错信息                }            }        }    }    //保存命令    class SaveAction extends AbstractAction {        private static final long serialVersionUID = -1100797410108575865L;        public SaveAction() {            super("保存");        }        @Override        public void actionPerformed(ActionEvent e) {            int i = filechooser.showSaveDialog(Editor.this); //显示保存文件对话框            if (i == JFileChooser.APPROVE_OPTION) {  //点击对话框中保存按钮                File f = filechooser.getSelectedFile(); //得到选择的文件                try {                    FileOutputStream out = new FileOutputStream(f);  //得到文件输出流                    out.write(textPane.getText().getBytes()); //写出文件                    out.close();                } catch (Exception ex) {                    ex.printStackTrace(); //输出出错信息                }            }        }    }    //退出命令    class ExitAction extends AbstractAction {        public ExitAction() {            super("退出");        }        @Override        public void actionPerformed(ActionEvent e) {            System.exit(0);  //退出程序        }    }    //剪切命令    class CutAction extends AbstractAction {        private static final long serialVersionUID = -4857036183067772701L;        public CutAction() {            super("剪切");        }        @Override        public void actionPerformed(ActionEvent e) {            textPane.cut();  //调用文本窗格的剪切命令        }    }    //拷贝命令    class CopyAction extends AbstractAction {        private static final long serialVersionUID = 6855635137658629057L;        public CopyAction() {            super("拷贝");        }        @Override        public void actionPerformed(ActionEvent e) {            textPane.copy();  //调用文本窗格的拷贝命令        }    }    //粘贴命令    class PasteAction extends AbstractAction {        private static final long serialVersionUID = 8147432700156033129L;        public PasteAction() {            super("粘贴");        }        @Override        public void actionPerformed(ActionEvent e) {            textPane.paste();  //调用文本窗格的粘贴命令        }    }    //关于选项命令    class AboutAction extends AbstractAction {        private static final long serialVersionUID = 4238301936705460698L;        public AboutAction() {            super("关于");        }        @Override        public void actionPerformed(ActionEvent e) {            JOptionPane.showMessageDialog(Editor.this, "作者：杨红岩"); //显示软件信息        }    }    class PopupUndoAction extends AbstractAction {        private static final long serialVersionUID = -110602908688032339L;        public PopupUndoAction() {            super("撤销");        }        @Override        public void actionPerformed(ActionEvent e) {            int len = textPane.getDocument().getLength();            if (len > 0) {                um.undo();//撤销            }        }    }    class PopupRedoAction extends AbstractAction {        private static final long serialVersionUID = 693436146259130326L;        public PopupRedoAction() {            super("恢复");        }        @Override        public void actionPerformed(ActionEvent e) {            um.redo();//恢复        }    }    class FanyiAction extends AbstractAction {        private static final long serialVersionUID = 1787931000392073131L;        public FanyiAction() {            super("翻译");        }        @Override        public void actionPerformed(ActionEvent e) {            System.out.println(textPane.getText());        }    }    public static void main(String[] args) {        new Editor();    }}